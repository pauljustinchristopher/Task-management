{"ast":null,"code":"// Validation utility functions\n// Email validation\nexport const isValidEmail=email=>{const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);};// Password validation\nexport const isValidPassword=password=>{// At least 6 characters, one uppercase, one lowercase, one number\nconst passwordRegex=/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{6,}$/;return passwordRegex.test(password);};// Name validation\nexport const isValidName=name=>{return name&&name.trim().length>=2;};// Phone validation\nexport const isValidPhone=phone=>{const phoneRegex=/^[\\+]?[1-9][\\d]{0,15}$/;return phoneRegex.test(phone);};// URL validation\nexport const isValidURL=url=>{try{new URL(url);return true;}catch(_unused){return false;}};// Required field validation\nexport const isRequired=value=>{if(typeof value==='string'){return value.trim().length>0;}return value!==null&&value!==undefined&&value!=='';};// Min length validation\nexport const minLength=(value,min)=>{if(typeof value==='string'){return value.trim().length>=min;}return false;};// Max length validation\nexport const maxLength=(value,max)=>{if(typeof value==='string'){return value.trim().length<=max;}return false;};// Password confirmation validation\nexport const confirmPassword=(password,confirmation)=>{return password===confirmation;};// Validation error messages\nexport const getValidationMessage=(field,rule,value)=>{const messages={required:\"\".concat(field,\" is required\"),email:'Please enter a valid email address',password:'Password must be at least 6 characters with uppercase, lowercase, and number',minLength:\"\".concat(field,\" must be at least \").concat(value,\" characters\"),maxLength:\"\".concat(field,\" must not exceed \").concat(value,\" characters\"),confirmPassword:'Passwords do not match',name:'Name must be at least 2 characters',phone:'Please enter a valid phone number',url:'Please enter a valid URL'};return messages[rule]||\"Invalid \".concat(field);};// Form validation helper\nexport const validateForm=(data,rules)=>{const errors={};Object.keys(rules).forEach(field=>{const value=data[field];const fieldRules=rules[field];fieldRules.forEach(rule=>{if(typeof rule==='string'){// Simple rule like 'required', 'email', etc.\nswitch(rule){case'required':if(!isRequired(value)){errors[field]=getValidationMessage(field,'required');}break;case'email':if(value&&!isValidEmail(value)){errors[field]=getValidationMessage(field,'email');}break;case'password':if(value&&!isValidPassword(value)){errors[field]=getValidationMessage(field,'password');}break;case'name':if(value&&!isValidName(value)){errors[field]=getValidationMessage(field,'name');}break;case'phone':if(value&&!isValidPhone(value)){errors[field]=getValidationMessage(field,'phone');}break;case'url':if(value&&!isValidURL(value)){errors[field]=getValidationMessage(field,'url');}break;}}else if(typeof rule==='object'){// Complex rule like { minLength: 6 }, { confirmPassword: 'password' }\nObject.keys(rule).forEach(ruleType=>{const ruleValue=rule[ruleType];switch(ruleType){case'minLength':if(value&&!minLength(value,ruleValue)){errors[field]=getValidationMessage(field,'minLength',ruleValue);}break;case'maxLength':if(value&&!maxLength(value,ruleValue)){errors[field]=getValidationMessage(field,'maxLength',ruleValue);}break;case'confirmPassword':if(value&&!confirmPassword(data[ruleValue],value)){errors[field]=getValidationMessage(field,'confirmPassword');}break;}});}});});return{isValid:Object.keys(errors).length===0,errors};};// Example usage:\n/*\r\nconst formData = {\r\n  firstName: 'John',\r\n  lastName: 'Doe',\r\n  email: 'john@example.com',\r\n  password: 'Password123',\r\n  confirmPassword: 'Password123'\r\n};\r\n\r\nconst validationRules = {\r\n  firstName: ['required', 'name'],\r\n  lastName: ['required', 'name'],\r\n  email: ['required', 'email'],\r\n  password: ['required', 'password'],\r\n  confirmPassword: ['required', { confirmPassword: 'password' }]\r\n};\r\n\r\nconst { isValid, errors } = validateForm(formData, validationRules);\r\n*/export default{isValidEmail,isValidPassword,isValidName,isValidPhone,isValidURL,isRequired,minLength,maxLength,confirmPassword,getValidationMessage,validateForm};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}