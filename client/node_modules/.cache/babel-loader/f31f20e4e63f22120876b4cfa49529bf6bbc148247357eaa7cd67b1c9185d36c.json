{"ast":null,"code":"import axios from'axios';import{toast}from'react-hot-toast';const API_URL=process.env.REACT_APP_API_URL||'http://localhost:5000/api';const api=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Request interceptor to add auth token\napi.interceptors.request.use(config=>{const token=localStorage.getItem('token');if(token){config.headers.Authorization=\"Bearer \".concat(token);}return config;},error=>Promise.reject(error));// Response interceptor for error handling\napi.interceptors.response.use(response=>response,error=>{var _response$data;const{response}=error;if((response===null||response===void 0?void 0:response.status)===401){localStorage.removeItem('token');window.location.href='/login';}const message=(response===null||response===void 0?void 0:(_response$data=response.data)===null||_response$data===void 0?void 0:_response$data.message)||'An error occurred';toast.error(message);return Promise.reject(error);});// Auth API calls\nexport const authAPI={// Login\nlogin:credentials=>{return api.post('/auth/login',credentials);},// Register\nregister:userData=>{return api.post('/auth/register',userData);},// Logout\nlogout:()=>{return api.post('/auth/logout');},// Refresh token\nrefreshToken:()=>{return api.post('/auth/refresh');},// Forgot password\nforgotPassword:email=>{return api.post('/auth/forgot-password',{email});},// Reset password\nresetPassword:(token,password)=>{return api.post(\"/auth/reset-password/\".concat(token),{password});},// Verify reset token\nverifyResetToken:token=>{return api.get(\"/auth/verify-reset-token/\".concat(token));},// Get profile\ngetProfile:()=>{return api.get('/auth/profile');},// Update profile\nupdateProfile:data=>{return api.put('/auth/profile',data);},// Update password\nupdatePassword:passwordData=>{return api.put('/auth/password',passwordData);},// Delete account\ndeleteAccount:()=>{return api.delete('/auth/account');}};// Project API calls\nexport const projectAPI={// Get all projects\ngetProjects:function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const queryString=new URLSearchParams(params).toString();return api.get(\"/projects?\".concat(queryString));},// Get single project\ngetProject:id=>{return api.get(\"/projects/\".concat(id));},// Create new project\ncreateProject:projectData=>{return api.post('/projects',projectData);},// Update project\nupdateProject:(id,projectData)=>{return api.put(\"/projects/\".concat(id),projectData);},// Delete project\ndeleteProject:id=>{return api.delete(\"/projects/\".concat(id));},// Get project members\ngetProjectMembers:id=>{return api.get(\"/projects/\".concat(id,\"/members\"));},// Add member to project\naddMember:(id,memberData)=>{return api.post(\"/projects/\".concat(id,\"/members\"),memberData);},// Remove member from project\nremoveMember:(id,userId)=>{return api.delete(\"/projects/\".concat(id,\"/members/\").concat(userId));},// Update member role\nupdateMemberRole:(id,userId,roleData)=>{return api.put(\"/projects/\".concat(id,\"/members/\").concat(userId),roleData);},// Get project activities\ngetProjectActivities:function(id){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const queryString=new URLSearchParams(params).toString();return api.get(\"/projects/\".concat(id,\"/activities?\").concat(queryString));},// Archive project\narchiveProject:id=>{return api.put(\"/projects/\".concat(id,\"/archive\"));},// Restore project\nrestoreProject:id=>{return api.put(\"/projects/\".concat(id,\"/restore\"));}};// Task API calls\nexport const taskAPI={// Get all tasks\ngetTasks:function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const queryString=new URLSearchParams(params).toString();return api.get(\"/tasks?\".concat(queryString));},// Get single task\ngetTask:id=>{return api.get(\"/tasks/\".concat(id));},// Create new task\ncreateTask:taskData=>{return api.post('/tasks',taskData);},// Update task\nupdateTask:(id,taskData)=>{return api.put(\"/tasks/\".concat(id),taskData);},// Delete task\ndeleteTask:id=>{return api.delete(\"/tasks/\".concat(id));},// Add comment to task\naddComment:(id,commentData)=>{return api.post(\"/tasks/\".concat(id,\"/comments\"),commentData);},// Update comment\nupdateComment:(taskId,commentId,commentData)=>{return api.put(\"/tasks/\".concat(taskId,\"/comments/\").concat(commentId),commentData);},// Delete comment\ndeleteComment:(taskId,commentId)=>{return api.delete(\"/tasks/\".concat(taskId,\"/comments/\").concat(commentId));},// Add subtask\naddSubtask:(id,subtaskData)=>{return api.post(\"/tasks/\".concat(id,\"/subtasks\"),subtaskData);},// Toggle subtask completion\ntoggleSubtask:(taskId,subtaskId)=>{return api.put(\"/tasks/\".concat(taskId,\"/subtasks/\").concat(subtaskId,\"/toggle\"));},// Start time tracking\nstartTimeTracking:(id,description)=>{return api.post(\"/tasks/\".concat(id,\"/time-tracking/start\"),{description});},// Stop time tracking\nstopTimeTracking:id=>{return api.post(\"/tasks/\".concat(id,\"/time-tracking/stop\"));},// Update task positions (for drag and drop)\nupdateTaskPositions:positions=>{return api.put('/tasks/positions',{positions});}};// Analytics API calls\nexport const analyticsAPI={// Get dashboard analytics\ngetDashboardAnalytics:()=>{return api.get('/analytics/dashboard');},// Get task analytics\ngetTaskAnalytics:function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const queryString=new URLSearchParams(params).toString();return api.get(\"/analytics/tasks?\".concat(queryString));},// Get project analytics\ngetProjectAnalytics:function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const queryString=new URLSearchParams(params).toString();return api.get(\"/analytics/projects?\".concat(queryString));},// Get user productivity analytics\ngetUserProductivity:function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const queryString=new URLSearchParams(params).toString();return api.get(\"/analytics/productivity?\".concat(queryString));},// Get time tracking analytics\ngetTimeTracking:function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const queryString=new URLSearchParams(params).toString();return api.get(\"/analytics/time-tracking?\".concat(queryString));}};// Upload API calls\nexport const uploadAPI={// Upload file\nuploadFile:function(file){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'general';const formData=new FormData();formData.append('file',file);formData.append('type',type);return api.post('/upload',formData,{headers:{'Content-Type':'multipart/form-data'}});},// Upload multiple files\nuploadFiles:function(files){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'general';const formData=new FormData();files.forEach(file=>{formData.append('files',file);});formData.append('type',type);return api.post('/upload/multiple',formData,{headers:{'Content-Type':'multipart/form-data'}});},// Delete file\ndeleteFile:fileId=>{return api.delete(\"/upload/\".concat(fileId));}};// User API calls\nexport const userAPI={// Get all users (for mentions, assignments, etc.)\ngetUsers:function(){let params=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};const queryString=new URLSearchParams(params).toString();return api.get(\"/users?\".concat(queryString));},// Get user by ID\ngetUser:id=>{return api.get(\"/users/\".concat(id));},// Search users\nsearchUsers:query=>{return api.get(\"/users/search?q=\".concat(encodeURIComponent(query)));},// Get user activities\ngetUserActivities:function(id){let params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const queryString=new URLSearchParams(params).toString();return api.get(\"/users/\".concat(id,\"/activities?\").concat(queryString));}};// Search API calls\nexport const searchAPI={// Global search\nglobalSearch:query=>{return api.get('/search',{params:{q:query}});},// Search projects\nsearchProjects:query=>{return api.get('/search/projects',{params:{q:query}});},// Search tasks\nsearchTasks:query=>{return api.get('/search/tasks',{params:{q:query}});},// Search users\nsearchUsers:query=>{return api.get('/search/users',{params:{q:query}});}};// Notifications API calls\nexport const notificationAPI={// Get notifications\ngetNotifications:()=>{return api.get('/notifications');},// Mark notification as read\nmarkAsRead:id=>{return api.put(\"/notifications/\".concat(id,\"/read\"));},// Mark all notifications as read\nmarkAllAsRead:()=>{return api.put('/notifications/read-all');},// Delete notification\ndeleteNotification:id=>{return api.delete(\"/notifications/\".concat(id));}};// Export all APIs\nexport default{projects:projectAPI,tasks:taskAPI,analytics:analyticsAPI,upload:uploadAPI,users:userAPI};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}