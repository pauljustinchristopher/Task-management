{"ast":null,"code":"// Validation utility functions\n\n// Email validation\nexport const isValidEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n// Password validation\nexport const isValidPassword = password => {\n  // At least 6 characters - matching backend validation\n  return password && password.length >= 6;\n};\n\n// Name validation\nexport const isValidName = name => {\n  return name && name.trim().length >= 2;\n};\n\n// Phone validation\nexport const isValidPhone = phone => {\n  const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\n  return phoneRegex.test(phone);\n};\n\n// URL validation\nexport const isValidURL = url => {\n  try {\n    new URL(url);\n    return true;\n  } catch {\n    return false;\n  }\n};\n\n// Required field validation\nexport const isRequired = value => {\n  if (typeof value === 'string') {\n    return value.trim().length > 0;\n  }\n  return value !== null && value !== undefined && value !== '';\n};\n\n// Min length validation\nexport const minLength = (value, min) => {\n  if (typeof value === 'string') {\n    return value.trim().length >= min;\n  }\n  return false;\n};\n\n// Max length validation\nexport const maxLength = (value, max) => {\n  if (typeof value === 'string') {\n    return value.trim().length <= max;\n  }\n  return false;\n};\n\n// Password confirmation validation\nexport const confirmPassword = (password, confirmation) => {\n  return password === confirmation;\n};\n\n// Validation error messages\nexport const getValidationMessage = (field, rule, value) => {\n  const messages = {\n    required: `${field} is required`,\n    email: 'Please enter a valid email address',\n    password: 'Password must be at least 6 characters',\n    minLength: `${field} must be at least ${value} characters`,\n    maxLength: `${field} must not exceed ${value} characters`,\n    confirmPassword: 'Passwords do not match',\n    name: 'Name must be at least 2 characters',\n    phone: 'Please enter a valid phone number',\n    url: 'Please enter a valid URL'\n  };\n  return messages[rule] || `Invalid ${field}`;\n};\n\n// Form validation helper\nexport const validateForm = (data, rules) => {\n  const errors = {};\n  Object.keys(rules).forEach(field => {\n    const value = data[field];\n    const fieldRules = rules[field];\n    fieldRules.forEach(rule => {\n      if (typeof rule === 'string') {\n        // Simple rule like 'required', 'email', etc.\n        switch (rule) {\n          case 'required':\n            if (!isRequired(value)) {\n              errors[field] = getValidationMessage(field, 'required');\n            }\n            break;\n          case 'email':\n            if (value && !isValidEmail(value)) {\n              errors[field] = getValidationMessage(field, 'email');\n            }\n            break;\n          case 'password':\n            if (value && !isValidPassword(value)) {\n              errors[field] = getValidationMessage(field, 'password');\n            }\n            break;\n          case 'name':\n            if (value && !isValidName(value)) {\n              errors[field] = getValidationMessage(field, 'name');\n            }\n            break;\n          case 'phone':\n            if (value && !isValidPhone(value)) {\n              errors[field] = getValidationMessage(field, 'phone');\n            }\n            break;\n          case 'url':\n            if (value && !isValidURL(value)) {\n              errors[field] = getValidationMessage(field, 'url');\n            }\n            break;\n        }\n      } else if (typeof rule === 'object') {\n        // Complex rule like { minLength: 6 }, { confirmPassword: 'password' }\n        Object.keys(rule).forEach(ruleType => {\n          const ruleValue = rule[ruleType];\n          switch (ruleType) {\n            case 'minLength':\n              if (value && !minLength(value, ruleValue)) {\n                errors[field] = getValidationMessage(field, 'minLength', ruleValue);\n              }\n              break;\n            case 'maxLength':\n              if (value && !maxLength(value, ruleValue)) {\n                errors[field] = getValidationMessage(field, 'maxLength', ruleValue);\n              }\n              break;\n            case 'confirmPassword':\n              if (value && !confirmPassword(data[ruleValue], value)) {\n                errors[field] = getValidationMessage(field, 'confirmPassword');\n              }\n              break;\n          }\n        });\n      }\n    });\n  });\n  return {\n    isValid: Object.keys(errors).length === 0,\n    errors\n  };\n};\n\n// Example usage:\n/*\r\nconst formData = {\r\n  firstName: 'John',\r\n  lastName: 'Doe',\r\n  email: 'john@example.com',\r\n  password: 'Password123',\r\n  confirmPassword: 'Password123'\r\n};\r\n\r\nconst validationRules = {\r\n  firstName: ['required', 'name'],\r\n  lastName: ['required', 'name'],\r\n  email: ['required', 'email'],\r\n  password: ['required', 'password'],\r\n  confirmPassword: ['required', { confirmPassword: 'password' }]\r\n};\r\n\r\nconst { isValid, errors } = validateForm(formData, validationRules);\r\n*/\n\nexport default {\n  isValidEmail,\n  isValidPassword,\n  isValidName,\n  isValidPhone,\n  isValidURL,\n  isRequired,\n  minLength,\n  maxLength,\n  confirmPassword,\n  getValidationMessage,\n  validateForm\n};","map":{"version":3,"names":["isValidEmail","email","emailRegex","test","isValidPassword","password","length","isValidName","name","trim","isValidPhone","phone","phoneRegex","isValidURL","url","URL","isRequired","value","undefined","minLength","min","maxLength","max","confirmPassword","confirmation","getValidationMessage","field","rule","messages","required","validateForm","data","rules","errors","Object","keys","forEach","fieldRules","ruleType","ruleValue","isValid"],"sources":["C:/Users/paulj/Desktop/SIWES/defence project/client/src/utils/validation.js"],"sourcesContent":["// Validation utility functions\r\n\r\n// Email validation\r\nexport const isValidEmail = (email) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n};\r\n\r\n// Password validation\r\nexport const isValidPassword = (password) => {\r\n  // At least 6 characters - matching backend validation\r\n  return password && password.length >= 6;\r\n};\r\n\r\n// Name validation\r\nexport const isValidName = (name) => {\r\n  return name && name.trim().length >= 2;\r\n};\r\n\r\n// Phone validation\r\nexport const isValidPhone = (phone) => {\r\n  const phoneRegex = /^[\\+]?[1-9][\\d]{0,15}$/;\r\n  return phoneRegex.test(phone);\r\n};\r\n\r\n// URL validation\r\nexport const isValidURL = (url) => {\r\n  try {\r\n    new URL(url);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n\r\n// Required field validation\r\nexport const isRequired = (value) => {\r\n  if (typeof value === 'string') {\r\n    return value.trim().length > 0;\r\n  }\r\n  return value !== null && value !== undefined && value !== '';\r\n};\r\n\r\n// Min length validation\r\nexport const minLength = (value, min) => {\r\n  if (typeof value === 'string') {\r\n    return value.trim().length >= min;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Max length validation\r\nexport const maxLength = (value, max) => {\r\n  if (typeof value === 'string') {\r\n    return value.trim().length <= max;\r\n  }\r\n  return false;\r\n};\r\n\r\n// Password confirmation validation\r\nexport const confirmPassword = (password, confirmation) => {\r\n  return password === confirmation;\r\n};\r\n\r\n// Validation error messages\r\nexport const getValidationMessage = (field, rule, value) => {\r\n  const messages = {\r\n    required: `${field} is required`,\r\n    email: 'Please enter a valid email address',\r\n    password: 'Password must be at least 6 characters',\r\n    minLength: `${field} must be at least ${value} characters`,\r\n    maxLength: `${field} must not exceed ${value} characters`,\r\n    confirmPassword: 'Passwords do not match',\r\n    name: 'Name must be at least 2 characters',\r\n    phone: 'Please enter a valid phone number',\r\n    url: 'Please enter a valid URL'\r\n  };\r\n  \r\n  return messages[rule] || `Invalid ${field}`;\r\n};\r\n\r\n// Form validation helper\r\nexport const validateForm = (data, rules) => {\r\n  const errors = {};\r\n  \r\n  Object.keys(rules).forEach(field => {\r\n    const value = data[field];\r\n    const fieldRules = rules[field];\r\n    \r\n    fieldRules.forEach(rule => {\r\n      if (typeof rule === 'string') {\r\n        // Simple rule like 'required', 'email', etc.\r\n        switch (rule) {\r\n          case 'required':\r\n            if (!isRequired(value)) {\r\n              errors[field] = getValidationMessage(field, 'required');\r\n            }\r\n            break;\r\n          case 'email':\r\n            if (value && !isValidEmail(value)) {\r\n              errors[field] = getValidationMessage(field, 'email');\r\n            }\r\n            break;\r\n          case 'password':\r\n            if (value && !isValidPassword(value)) {\r\n              errors[field] = getValidationMessage(field, 'password');\r\n            }\r\n            break;\r\n          case 'name':\r\n            if (value && !isValidName(value)) {\r\n              errors[field] = getValidationMessage(field, 'name');\r\n            }\r\n            break;\r\n          case 'phone':\r\n            if (value && !isValidPhone(value)) {\r\n              errors[field] = getValidationMessage(field, 'phone');\r\n            }\r\n            break;\r\n          case 'url':\r\n            if (value && !isValidURL(value)) {\r\n              errors[field] = getValidationMessage(field, 'url');\r\n            }\r\n            break;\r\n        }\r\n      } else if (typeof rule === 'object') {\r\n        // Complex rule like { minLength: 6 }, { confirmPassword: 'password' }\r\n        Object.keys(rule).forEach(ruleType => {\r\n          const ruleValue = rule[ruleType];\r\n          \r\n          switch (ruleType) {\r\n            case 'minLength':\r\n              if (value && !minLength(value, ruleValue)) {\r\n                errors[field] = getValidationMessage(field, 'minLength', ruleValue);\r\n              }\r\n              break;\r\n            case 'maxLength':\r\n              if (value && !maxLength(value, ruleValue)) {\r\n                errors[field] = getValidationMessage(field, 'maxLength', ruleValue);\r\n              }\r\n              break;\r\n            case 'confirmPassword':\r\n              if (value && !confirmPassword(data[ruleValue], value)) {\r\n                errors[field] = getValidationMessage(field, 'confirmPassword');\r\n              }\r\n              break;\r\n          }\r\n        });\r\n      }\r\n    });\r\n  });\r\n  \r\n  return {\r\n    isValid: Object.keys(errors).length === 0,\r\n    errors\r\n  };\r\n};\r\n\r\n// Example usage:\r\n/*\r\nconst formData = {\r\n  firstName: 'John',\r\n  lastName: 'Doe',\r\n  email: 'john@example.com',\r\n  password: 'Password123',\r\n  confirmPassword: 'Password123'\r\n};\r\n\r\nconst validationRules = {\r\n  firstName: ['required', 'name'],\r\n  lastName: ['required', 'name'],\r\n  email: ['required', 'email'],\r\n  password: ['required', 'password'],\r\n  confirmPassword: ['required', { confirmPassword: 'password' }]\r\n};\r\n\r\nconst { isValid, errors } = validateForm(formData, validationRules);\r\n*/\r\n\r\nexport default {\r\n  isValidEmail,\r\n  isValidPassword,\r\n  isValidName,\r\n  isValidPhone,\r\n  isValidURL,\r\n  isRequired,\r\n  minLength,\r\n  maxLength,\r\n  confirmPassword,\r\n  getValidationMessage,\r\n  validateForm\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}