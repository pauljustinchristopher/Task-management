{"ast":null,"code":"import _objectSpread from\"C:/Users/paulj/Desktop/SIWES/defence project/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useReducer,useEffect}from'react';import{useQuery,useQueryClient}from'react-query';import{authAPI}from'../services/apiServices';import{toast}from'react-hot-toast';// Initial state\nimport{jsx as _jsx}from\"react/jsx-runtime\";const initialState={user:null,token:localStorage.getItem('token'),isAuthenticated:false,loading:true};// Action types\nconst ActionTypes={LOGIN_START:'LOGIN_START',LOGIN_SUCCESS:'LOGIN_SUCCESS',LOGIN_FAIL:'LOGIN_FAIL',LOGOUT:'LOGOUT',LOAD_USER:'LOAD_USER',UPDATE_USER:'UPDATE_USER',SET_LOADING:'SET_LOADING'};// Reducer\nconst authReducer=(state,action)=>{switch(action.type){case ActionTypes.LOGIN_START:return _objectSpread(_objectSpread({},state),{},{loading:true});case ActionTypes.LOGIN_SUCCESS:localStorage.setItem('token',action.payload.token);return _objectSpread(_objectSpread({},state),{},{user:action.payload.user,token:action.payload.token,isAuthenticated:true,loading:false});case ActionTypes.LOGIN_FAIL:localStorage.removeItem('token');return _objectSpread(_objectSpread({},state),{},{user:null,token:null,isAuthenticated:false,loading:false});case ActionTypes.LOGOUT:localStorage.removeItem('token');return _objectSpread(_objectSpread({},state),{},{user:null,token:null,isAuthenticated:false,loading:false});case ActionTypes.LOAD_USER:return _objectSpread(_objectSpread({},state),{},{user:action.payload,isAuthenticated:true,loading:false});case ActionTypes.UPDATE_USER:return _objectSpread(_objectSpread({},state),{},{user:_objectSpread(_objectSpread({},state.user),action.payload)});case ActionTypes.SET_LOADING:return _objectSpread(_objectSpread({},state),{},{loading:action.payload});default:return state;}};// Create context\nconst AuthContext=/*#__PURE__*/createContext();// Provider component\nexport const AuthProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(authReducer,initialState);const queryClient=useQueryClient();// Load user on mount if token exists\nconst{data:userData,isLoading}=useQuery('currentUser',()=>authAPI.getProfile(),{enabled:!!state.token,retry:false,onSuccess:data=>{dispatch({type:ActionTypes.LOAD_USER,payload:data.data});},onError:()=>{dispatch({type:ActionTypes.LOGIN_FAIL});}});// Set loading based on query state\nuseEffect(()=>{if(!state.token){dispatch({type:ActionTypes.SET_LOADING,payload:false});}else{dispatch({type:ActionTypes.SET_LOADING,payload:isLoading});}},[isLoading,state.token]);// Login function\nconst login=async credentials=>{try{dispatch({type:ActionTypes.LOGIN_START});const response=await authAPI.login(credentials);const{token,data:user}=response.data;dispatch({type:ActionTypes.LOGIN_SUCCESS,payload:{token,user}});// Invalidate and refetch user data\nqueryClient.invalidateQueries('currentUser');toast.success('Welcome back!');return response.data;}catch(error){var _error$response,_error$response$data;dispatch({type:ActionTypes.LOGIN_FAIL});const message=((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Login failed';toast.error(message);throw error;}};// Register function\nconst register=async userData=>{try{dispatch({type:ActionTypes.LOGIN_START});const response=await authAPI.register(userData);const{token,data:user}=response.data;dispatch({type:ActionTypes.LOGIN_SUCCESS,payload:{token,user}});toast.success('Account created successfully!');return response.data;}catch(error){var _error$response2,_error$response2$data;dispatch({type:ActionTypes.LOGIN_FAIL});const message=((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Registration failed';toast.error(message);throw error;}};// Logout function\nconst logout=async()=>{try{await authAPI.logout();}catch(error){console.error('Logout error:',error);}finally{dispatch({type:ActionTypes.LOGOUT});queryClient.clear();toast.success('Logged out successfully');}};// Update user profile\nconst updateProfile=async userData=>{try{const response=await authAPI.updateProfile(userData);dispatch({type:ActionTypes.UPDATE_USER,payload:response.data.data});queryClient.invalidateQueries('currentUser');toast.success('Profile updated successfully');return response.data;}catch(error){var _error$response3,_error$response3$data;const message=((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Update failed';toast.error(message);throw error;}};// Update password\nconst updatePassword=async passwordData=>{try{const response=await authAPI.updatePassword(passwordData);toast.success('Password updated successfully');return response.data;}catch(error){var _error$response4,_error$response4$data;const message=((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Password update failed';toast.error(message);throw error;}};// Forgot password\nconst forgotPassword=async email=>{try{const response=await authAPI.forgotPassword(email);toast.success('Password reset instructions sent to your email');return response.data;}catch(error){var _error$response5,_error$response5$data;const message=((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Request failed';toast.error(message);throw error;}};// Reset password\nconst resetPassword=async(token,password)=>{try{const response=await authAPI.resetPassword(token,password);toast.success('Password reset successfully');return response.data;}catch(error){var _error$response6,_error$response6$data;const message=((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Password reset failed';toast.error(message);throw error;}};const value=_objectSpread(_objectSpread({},state),{},{login,register,logout,updateProfile,updatePassword,forgotPassword,resetPassword});return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// Custom hook to use auth context\nexport const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}